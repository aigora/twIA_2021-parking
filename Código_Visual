#define TARIFA 0.06
#define DIM 8
#define MAX_BUFFER 200
#define MAX_INTENTOS_READ 4
#define MS_ENTRE_INTENTOS 200
#define SI 1
#define NO 0

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>
#include <windows.h>
#include <string.h>
#include <conio.h>
#include "SerialClass/SerialClass.h"
#include <Windows.h>

typedef struct {
	int plaza;
	float tiempo;
	char matricula[DIM];
}COCHE;

void registro(char matricula[], int coches);
void entrada(int coches, COCHE*);
int salida(int coches, COCHE*);
void tarifa(COCHE*, int coches);

// Funciones prototipo
//int menu_principal(void);
void configura(void);

void Talk_with_Arduino(Serial* Arduino);
void Send_to_hw(Serial*, char*);
int Receive_from_hw(Serial* Arduino, char* BufferEntrada);
int Send_and_Receive(Serial* Arduino, const char* msg_out, int valor_out, char* msg_in, int* valor_in);
void monitorizar_aforo(Serial*);

int main() {

	Serial* Arduino;
	char puerto[] = "COM3"; //Puerto serie al que está conectado Arduino
	char BufferEntrada[MAX_BUFFER];
	int bytesReceive, numero_recibido;

	// Tareas de configuración y carga
	configura();
	Arduino = new Serial((char*)puerto);  // Establece la conexión con Arduino

	printf("Introduce el numero de plazas de tu parking: ");
	int n;
	scanf_s("%d", &n);

	bytesReceive = Send_and_Receive(Arduino, "GET_AFORO_MAX", n, BufferEntrada, &numero_recibido);
	if (bytesReceive == 0)
		printf("No se ha recibido respuesta al mensaje enviado\n");
	else
		printf("Mensaje recibido %s %d\n", BufferEntrada, numero_recibido);

	COCHE* plazas;
	plazas = (COCHE*)calloc(n, sizeof(COCHE));

	int  coches = 0, mat, error = 0;
	float precio = 0, importe_introducido = 0;
	char opc;

	do {

		printf("\t\t\tBIENVENIDO, PRESIONE EL BOTON PARA CONTINUAR\n");

		do {
			bytesReceive = Send_and_Receive(Arduino, "Bienvenido", coches, BufferEntrada, &numero_recibido);
			if (bytesReceive != 0)
				printf("Mensaje recibido %s %d\n", BufferEntrada, numero_recibido);

		} while (numero_recibido != 1 && numero_recibido != 2);


		switch (numero_recibido) {

		case 1:

			if (coches == n) {
				printf("\t\t\tAFORO COMPLETO, POR FAVOR DE LA VUELTA\n\n\n");
				Sleep(2000);
				system("cls");
			}
			else {
				entrada(coches, plazas);

				do {

					bytesReceive = Send_and_Receive(Arduino, "Registro_completado_e", 1, BufferEntrada, &numero_recibido);
					if (bytesReceive != 0)
						printf("Mensaje recibido %s %d\n", BufferEntrada, numero_recibido);

				} while (numero_recibido != 10);

				Sleep(2000);

				system("cls");

				coches++;
			}
			break;


		case 2:

			if (coches == 0) {

				printf("No hay coches dentro");
				error++;

				Sleep(2000);
				system("cls");
			}

			if (coches > 0) {

				mat = salida(coches, plazas);

				if (mat == 1) {
					do {

						bytesReceive = Send_and_Receive(Arduino, "Registro_completado_s", 1, BufferEntrada, &numero_recibido);
						if (bytesReceive != 0)
							printf("Mensaje recibido %s %d\n", BufferEntrada, numero_recibido);

					} while (numero_recibido != 11);
					coches--;
				}

				else
					error++;

				Sleep(2000);

				system("cls");
			}

			break;
			
		default:
			break;
		}

		printf("Presione c para continuar: ");
		scanf_s(" %c", &opc);

	} while ((opc == 'c' || opc == 'C') && error == 0);

	if (error > 0)
		printf("\nSe ha producido un error");

	printf("\nHa salido del programa\n\n");
}

void entrada(int coches, COCHE* plazas) {

	printf("Introduzca su matricula: ");
	getchar();
	gets_s(plazas[coches].matricula);

	plazas[coches].tiempo = clock();

	registro(plazas[coches].matricula, coches);

	printf("\n\nOk, puede entrar\n\n");

}

void registro(char matricula_e[], int coches) {

	FILE* pf;

	errno_t err; // Open for read (will fail if file "registro.txt" doesn't exist)

	err = fopen_s(&pf, "registro.txt", "a+");

	if (err == 0) {

		printf("El archivo registro.txt esta abierto\n");

		fprintf_s(pf, "%s\n", matricula_e);
	}

	else
		printf("El archivo registro.txt NO está abierto\n");

	if (fclose(pf) == NULL)
		printf("\n Archivo cerrado correctamente");
	else
		printf("\n Error en el cierre del archivo");
}

int salida(int coches, COCHE* plazas) {

	int i = 0, mat;
	char matricula_sal[DIM];

	printf("Introduzca su matricula: ");
	getchar();
	gets_s(matricula_sal);

	do {  //comprobar si la matricula coincide con alguna del registro strcmp(matricula_sal, plazas[i].matricula) == 0

		if (strcmp(matricula_sal, plazas[i].matricula) == 0) {  //si coincide:

			tarifa(plazas, i);
			printf("\nBuen viaje\n");
		}

		else
			i++;

	} while ((strcmp(matricula_sal, plazas[i].matricula) != 0) && i < coches);

	mat = 1;

	if (i = coches && (strcmp(matricula_sal, plazas[i].matricula) != 0)) {
		printf("Matricula introducida no encontrada.\n");
		mat = 0;
	}
	return mat;
}

void tarifa(COCHE* plazas, int i) {

	float precio, tiempo, imp_i = 0.00;

	tiempo = (float)(clock() - plazas[i].tiempo) / 60000;

	precio = tiempo * TARIFA;

	do {

		printf("\nLe falta introducir %.2f EUROS, introduzcalos por favor: ", (precio - imp_i));
		scanf_s("%f", &imp_i);

	} while (precio > (imp_i + 0.009));

	if ((precio + 0.009) < imp_i)
		printf("\nSe le han devuelto %.2f EUROS, recojalos por favor\n", (imp_i - precio));

}

void configura(void)
{
	// Establece juego de caracteres castellano
	// Para que funcione hay que partir de un proyecto vacío
	// No utilice la plantilla Aplicación de consola C++
	setlocale(LC_ALL, "spanish");
}

// Ejemplo de función de intercambio de datos con Arduino
void Talk_with_Arduino(Serial* Arduino)
{
	//char BufferSalida[MAX_BUFFER];
	char BufferEntrada[MAX_BUFFER];
	int bytesReceive,numero_recibido;
	
	if (Arduino->IsConnected()) // Si hay conexión con Arduino 
	{

		// Para enviar un mensaje y obtener una respuesta se utiliza la función Send_and_Receive
		// El mensaje está formado por un texto y un entero
		// El mensaje que se recibe está formado también por un texto y un entero.
		// Parámetros de la función:
		// El primero es la referencia a Arduino
		// El segundo es el mensaje que se desea enviar
		// El tercero es un entero que complementa al mensaje que se desea enviar
		// El cuarto es el vector de char donde se recibe la respuesta
		// El quinto es la referencia donde se recibe el entero de la respuesta
		// IMPORTANTE: El mensaje de respuesta que emite Arduino  debe incluir un espacio en blanco separando respuesta de valor
		// La función devuelve un entero con los bytes recibidos. Si es cero no se ha recibido nada.

		bytesReceive = Send_and_Receive(Arduino, "GET_AFORO_MAX", -1, BufferEntrada, &numero_recibido);
		if (bytesReceive == 0)
			printf("No se ha recibido respuesta al mensaje enviado\n");
		else
			printf("Mensaje recibido %s %d\n", BufferEntrada, numero_recibido);
	}
	else
		printf("La comunicación con la plataforma hardware no es posible en este momento\n"); // Req 3
}

// Protocolo de intercambio mensajes entre Pc y platforma hardware
// Envío Mensaje valor
// Recibe Mensaje valor
		// IMPORTANTE: El mensaje de respuesta que emite Arduino  debe incluir un espacio en blanco separando respuesta de valor
// Retorna bytes de la respuesta (0 si no hay respuesta)
int Send_and_Receive(Serial* Arduino, const char* msg_out, int valor_out, char* msg_in, int* valor_in)
{
	char BufferSalida[MAX_BUFFER];
	char BufferEntrada[MAX_BUFFER];
	char* ptr;
	int bytesReceive;

	sprintf_s(BufferSalida, "%s\n%d\n", msg_out, valor_out);
	Send_to_hw(Arduino, BufferSalida);
	bytesReceive = Receive_from_hw(Arduino, BufferEntrada);
	if (bytesReceive != 0)
	{
		ptr = strpbrk(BufferEntrada, " ");
		if (ptr == NULL)
			*valor_in = -1;
		else
		{
			*valor_in = atoi(ptr);
			*ptr = '\0';
		}
		strcpy_s(msg_in, MAX_BUFFER, BufferEntrada);
	}
	return bytesReceive;
}


// Envía un mensaje a la plataforma hardware
void Send_to_hw(Serial* Arduino, char* BufferSalida)
{
	Arduino->WriteData(BufferSalida, strlen(BufferSalida));
}

//Recibe (si existe) un mensaje de la plataforma hardware
//Realiza MAX_INTENTOS_READ para evitar mensajes recortados
int Receive_from_hw(Serial* Arduino, char* BufferEntrada)
{
	int bytesRecibidos, bytesTotales = 0;
	int intentos_lectura = 0;
	char cadena[MAX_BUFFER];

	BufferEntrada[0] = '\0';
	while (intentos_lectura < MAX_INTENTOS_READ)
	{
		cadena[0] = '\0';
		bytesRecibidos = Arduino->ReadData(cadena, sizeof(char) * (MAX_BUFFER - 1));
		if (bytesRecibidos != -1)
		{
			cadena[bytesRecibidos] = '\0';
			strcat_s(BufferEntrada, MAX_BUFFER, cadena);
			bytesTotales += bytesRecibidos;
		}
		intentos_lectura++;
		Sleep(MS_ENTRE_INTENTOS);
	}
	return bytesTotales;
}
